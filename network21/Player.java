

import java.io.*;
import java.net.Socket;
import java.net.UnknownHostException;
import javax.swing.*;

public class Player extends javax.swing.JFrame {

    private Socket socket;
    private BufferedReader in;
    private PrintWriter out;


    /**
     * Creates new form Player
     */
    public Player(){
        initComponents();

        UsernamePage.setVisible(true);
        ConnectedRoom.setVisible(false);

        connectButton.addActionListener(evt -> connectToServer());
    }

    public void connectToServer() {
        String username = usernameField.getText().trim();

        if(username.isEmpty()){
            javax.swing.JOptionPane.showMessageDialog(this, "Username cannot be empty!");
            return;
        }

        try{
            socket = new Socket("localhost", 2121);
        out = new PrintWriter(socket.getOutputStream(), true); // Auto flush

        out.println(username);
            new Thread(new ServerListener(socket, this)).start();

        // Update UI
        UsernamePage.setVisible(false);
        ConnectedRoom.setVisible(true);

        // Append the username to the connectedList
       // connectedList.append(username + "\n");
        connectedList.setCaretPosition(connectedList.getDocument().getLength());

        }catch(Exception e){
            e.printStackTrace();
        }
    }


   /* public void handleMessage(String message){
        SwingUtilities.invokeLater(() ->{
            System.out.println("Received message: " + message);
            connectedList.append(message + "\n");
            connectedList.setCaretPosition(connectedList.getDocument().getLength());
            ConnectedRoom.revalidate();
            
        });
    } */
    public void handleMessage(String message) {
        SwingUtilities.invokeLater(() -> {
            System.out.println("Received message: " + message);
    
            if (message.startsWith("Connected Players:")) {
                // Clear the text area before adding new names
                connectedList.setText("");
    
                // Remove the "Connected Players:" header
                String displayMessage = message.substring("Connected Players:\n".length());
    
                // Rewrite the updated list of names
                connectedList.append(displayMessage);
            } else {
                // For any other message, just append normally
                connectedList.append(message + "\n");
            }
    
            connectedList.setCaretPosition(connectedList.getDocument().getLength());
            ConnectedRoom.revalidate();
        });
    }
    
    
    
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        ConnectedRoom = new javax.swing.JPanel();
        connectedPlayers = new javax.swing.JScrollPane();
        connectedList = new javax.swing.JTextArea();
        UsernamePage = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        connectedList.setEditable(false);
        connectedList.setColumns(20);
        connectedList.setRows(5);
        connectedPlayers.setViewportView(connectedList);

        javax.swing.GroupLayout ConnectedRoomLayout = new javax.swing.GroupLayout(ConnectedRoom);
        ConnectedRoom.setLayout(ConnectedRoomLayout);
        ConnectedRoomLayout.setHorizontalGroup(
                ConnectedRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 721, Short.MAX_VALUE)
                        .addGroup(ConnectedRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(ConnectedRoomLayout.createSequentialGroup()
                                        .addGap(243, 243, 243)
                                        .addComponent(connectedPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(244, Short.MAX_VALUE)))
        );
        ConnectedRoomLayout.setVerticalGroup(
                ConnectedRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 680, Short.MAX_VALUE)
                        .addGroup(ConnectedRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(ConnectedRoomLayout.createSequentialGroup()
                                        .addGap(294, 294, 294)
                                        .addComponent(connectedPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(295, Short.MAX_VALUE)))
        );

        UsernamePage.setToolTipText("");

        jLabel1.setText("Enter your name:");

        connectButton.setText("Connect");

        javax.swing.GroupLayout UsernamePageLayout = new javax.swing.GroupLayout(UsernamePage);
        UsernamePage.setLayout(UsernamePageLayout);
        UsernamePageLayout.setHorizontalGroup(
                UsernamePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UsernamePageLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(UsernamePageLayout.createSequentialGroup()
                                .addGap(222, 222, 222)
                                .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(227, Short.MAX_VALUE))
                        .addGroup(UsernamePageLayout.createSequentialGroup()
                                .addGap(305, 305, 305)
                                .addComponent(connectButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        UsernamePageLayout.setVerticalGroup(
                UsernamePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(UsernamePageLayout.createSequentialGroup()
                                .addGap(180, 180, 180)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(connectButton)
                                .addContainerGap(374, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(UsernamePage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ConnectedRoom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(UsernamePage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ConnectedRoom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Player.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Player().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JPanel ConnectedRoom;
    private javax.swing.JPanel UsernamePage;
    private javax.swing.JButton connectButton;
    private javax.swing.JTextArea connectedList;
    private javax.swing.JScrollPane connectedPlayers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField usernameField;
    // End of variables declaration
}
